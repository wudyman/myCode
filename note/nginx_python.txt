一：安装python3 和pip

二：安装,测试uwsgi
1）安装：	pip install uwsgi
2）测试：
# test.py
def application(env, start_response):
    start_response('200 OK', [('Content-Type','text/html')])
    #return ["Hello World"] # python2
    return [b"Hello World"] # python3
然后，Run uWSGI:
uwsgi --http :8082 --wsgi-file test.py
浏览器输入localhost:8082 测试

三：安装 nginx
官网www.nginx.org 下载并解压最新版本。
./configure \
--prefix=/home/wudy/install_software/nginx \
--sbin-path=/home/wudy/install_software/nginx/nginx \
--conf-path=/home/wudy/install_software/nginx/nginx.conf \
--pid-path=/home/wudy/install_software/nginx/nginx.pid \
--with-http_ssl_module

启动：./nginx
退出：./nginx -s stop
帮助：./nginx -h

四.安装django
 参考 “about_centos.txt”中第十三段落
 
五.用uwsgi连接django.
 flow:"the web client <-> uWSGI <-> Django"
 命令：uwsgi --http :8000 --module mysite.wsgi  （mysite.wsgi 即是mysite目录下的wsgi.py文件）
 浏览器输入localhost:8082 测试
 
六.nginx 连接 uwsgi 连接django
1).  /home/wudy/install_software/nginx/nginx.conf 中 增加一句：include /etc/nginx_conf/*;
2).  在django的项目mysite 目录下 创建目录 media 和static
3).   在django的项目mysite 目录下创建 mysite_nginx.conf 添加以下内容，并link 到 /etc/nginx_conf/  :   sudo ln -s /home/wudy/study/web/mysite/mysite_nginx.conf /etc/nginx_conf/
# mysite_nginx.conf
# the upstream component nginx needs to connect to
upstream django {
    # server unix:///path/to/your/mysite/mysite.sock; # for a file socket
    server localhost:8001; # for a web port socket (we'll use this first)
}

# configuration of the server
server {
    # the port your site will be served on
    listen      8000;
    # the domain name it will serve for
    server_name .example.com; # substitute your machine's IP address or FQDN
    charset     utf-8;

    # max upload size
    client_max_body_size 75M;   # adjust to taste

    # Django media
    location /media  {
        alias /path/to/your/mysite/media;  # your Django project's media files - amend as required
    }

    location /static {
        alias /path/to/your/mysite/static; # your Django project's static files - amend as required
    }

    # Finally, send all non-media requests to the Django server.
    location / {
        uwsgi_pass  django;
        include     /path/to/your/mysite/uwsgi_params; # the uwsgi_params file you installed
    }
}
4).部署静态文件
mysite/settings.py 中添加以下一句：
STATIC_ROOT = os.path.join(BASE_DIR, "static/")   
然后运行：
python manage.py collectstatic

5). 启动：
先运行： nginx
然后运行：uwsgi --socket :8001 --module mysite.wsgi

6). 使用unix socket 替换 端口转发
mysite_nginx.conf中更改为：
 upstream django {
    server unix:///home/wudy/study/web/mysite/mysite.sock; # for a file socket
    #server localhost:8001; # for a web port socket (we'll use this first)
}
先运行： nginx
然后运行：uwsgi --socket mysite.sock --module mysite.wsgi

7). uwsgi 运行 .ini文件启动
 在mysite文件夹下创建文件mysite_uwsgi.ini，并添加以下内容：
 然后运行：uwsgi --ini mysite_uwsgi.ini
 
 # mysite_uwsgi.ini file
[uwsgi]

# Django-related settings
# the base directory (full path)
chdir           = /home/wudy/study/web/mysite
# Django's wsgi file
module          = mysite.wsgi
# the virtualenv (full path)
#home            = /path/to/virtualenv

# process-related settings
# master
master          = true
# maximum number of worker processes
processes       = 10
# the socket (use the full path to be safe
socket          = /home/wudy/study/web/mysite/mysite.sock
# ... with appropriate permissions - may be needed
# chmod-socket    = 664
# clear environment on exit
vacuum          = true

# every time update the directory /home/wudy/study/web/mysite, uwsgi will auto restart
touch-reload = /home/wudy/study/web/mysite