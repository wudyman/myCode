值传递，指针传递，引用传递

1. c
值传递：原始变量的值的副本传给函数变量，对函数变量的修改不影响原始变量的值。
举例：
int a=1,b=2;
swap(int x,int y)
{
int temp=x;
x=y;
y=temp;
}
调用swap(a,b)时，函数变量x,y变化，x=2,y=1.执行后，原始变量a,b的值不变。

指针传递：原始变量的地址传递给函数的指针变量，指针变量的取值修改会改变原始变量的值，指针变量自身的修改会指向其他的地址，但是不会改变原始变量的值。

int a=1,b=2;
swap(int *x,int *y)
{
int temp=*x;
*x=*y;
*y=temp;
}
调用swap(&a,&b)时，函数变量x,y变化，x=2,y=1.执行后，原始变量a,b的值也变化了，a=2,b=1。

2. c++
值传递：同c的值传递
指针传递：同c的指针传递
引用传递：
int a=1,b=2;
swap(int &x,int &y)
{
int temp=x;
x=y;
y=temp;
}
调用swap(a,b)时，函数变量x,y变化，x=2,y=1.执行后，原始变量a,b的值也变化了，a=2,b=1。
3. java
值传递：
java的基本数据类型使用值传递，类似于c/c++的值传递。
对象类型也是值传递，类似于c/c++的指针传递，传递给对象变量的只是对象的地址值，并不是对象本身
4. javascript
值传递：
javascript的基本数据类型使用值传递，类似于c/c++的值传递。
对象类型也是值传递，类似于c/c++的指针传递，传递给对象变量的只是对象的地址值，并不是对象本身
举例：对象类型的值传递,传递给变量obj的只是地址值，当改变obj去指向另外的对象地址后，修改内容并不会改变原来变量的内容，还是显示"Nicolas".
function setName(obj)
{
obj.name="Nicolas";
obj=new Object();
opj.name="Greg";
}

var person=new Object();
setName(person)
alert(person.name);//show "Nicolas"